
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// NOTE: This file is generated via a T4 template. Please do not edit this file directly. Any changes should be made
// in InvariantUri.tt.

namespace System.Text
{
    public static partial class PrimitiveParser
    {
        public static partial class InvariantUtf8
        {
            public unsafe static bool TryParseUri(byte* text, int length, out Uri value)
            {
                if (length < 1)
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                StringBuilder sb = new StringBuilder(length);
                byte nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                for (int i = 1; i < length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            // No need to set consumed
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            // No need to set consumed
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    // No need to set consumed
                    return true;
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }
            }
            public unsafe static bool TryParseUri(byte* text, int length, out Uri value, out int bytesConsumed)
            {
                if (length < 1)
                {
                    value = default(Uri);
                    bytesConsumed = 0;
                    return false;
                }

                StringBuilder sb = new StringBuilder(length);
                byte nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    bytesConsumed = 0;
                    return false;
                }

                for (int i = 1; i < length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            bytesConsumed = i;
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            bytesConsumed = 0;
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    bytesConsumed = length;
                    return true;
                }
                else
                {
                    value = default(Uri);
                    bytesConsumed = 0;
                    return false;
                }
            }
            public static bool TryParseUri(ReadOnlySpan<byte> text, out Uri value)
            {
                if (text.Length < 1)
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                StringBuilder sb = new StringBuilder(text.Length);
                byte nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                for (int i = 1; i < text.Length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            // No need to set consumed
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            // No need to set consumed
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    // No need to set consumed
                    return true;
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }
            }
            public static bool TryParseUri(ReadOnlySpan<byte> text, out Uri value, out int bytesConsumed)
            {
                if (text.Length < 1)
                {
                    value = default(Uri);
                    bytesConsumed = 0;
                    return false;
                }

                StringBuilder sb = new StringBuilder(text.Length);
                byte nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    bytesConsumed = 0;
                    return false;
                }

                for (int i = 1; i < text.Length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            bytesConsumed = i;
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            bytesConsumed = 0;
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    bytesConsumed = text.Length;
                    return true;
                }
                else
                {
                    value = default(Uri);
                    bytesConsumed = 0;
                    return false;
                }
            }
        }
        public static partial class InvariantUtf16
        {
            public unsafe static bool TryParseUri(char* text, int length, out Uri value)
            {
                if (length < 1)
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                StringBuilder sb = new StringBuilder(length);
                char nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                for (int i = 1; i < length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            // No need to set consumed
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            // No need to set consumed
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    // No need to set consumed
                    return true;
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }
            }
            public unsafe static bool TryParseUri(char* text, int length, out Uri value, out int charsConsumed)
            {
                if (length < 1)
                {
                    value = default(Uri);
                    charsConsumed = 0;
                    return false;
                }

                StringBuilder sb = new StringBuilder(length);
                char nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    charsConsumed = 0;
                    return false;
                }

                for (int i = 1; i < length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            charsConsumed = i;
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            charsConsumed = 0;
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    charsConsumed = length;
                    return true;
                }
                else
                {
                    value = default(Uri);
                    charsConsumed = 0;
                    return false;
                }
            }
            public static bool TryParseUri(ReadOnlySpan<char> text, out Uri value)
            {
                if (text.Length < 1)
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                StringBuilder sb = new StringBuilder(text.Length);
                char nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }

                for (int i = 1; i < text.Length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            // No need to set consumed
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            // No need to set consumed
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    // No need to set consumed
                    return true;
                }
                else
                {
                    value = default(Uri);
                    // No need to set consumed
                    return false;
                }
            }
            public static bool TryParseUri(ReadOnlySpan<char> text, out Uri value, out int charsConsumed)
            {
                if (text.Length < 1)
                {
                    value = default(Uri);
                    charsConsumed = 0;
                    return false;
                }

                StringBuilder sb = new StringBuilder(text.Length);
                char nextCharacter = text[0];
                if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                {
                    sb.Append((char)nextCharacter);
                }
                else
                {
                    value = default(Uri);
                    charsConsumed = 0;
                    return false;
                }

                for (int i = 1; i < text.Length; i++)
                {
                    nextCharacter = text[i];
                    if (nextCharacter == '#' || nextCharacter == '&' || nextCharacter == '=' || nextCharacter == '?' || nextCharacter == '_' || nextCharacter == '\\' || nextCharacter == ':' ||
                    nextCharacter >= '-' && nextCharacter <= '9' || nextCharacter >= 'A' && nextCharacter <= 'Z' || nextCharacter >= 'a' && nextCharacter <= 'z')
                    {
                        sb.Append((char)nextCharacter);
                    }
                    else
                    {
                        if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                        {
                            charsConsumed = i;
                            return true;
                        }
                        else
                        {
                            value = default(Uri);
                            charsConsumed = 0;
                            return false;
                        }
                    }
                }

                if (Uri.TryCreate(sb.ToString(), UriKind.Absolute, out value))
                {
                    charsConsumed = text.Length;
                    return true;
                }
                else
                {
                    value = default(Uri);
                    charsConsumed = 0;
                    return false;
                }
            }
        }
    }
}
