<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\PrimitiveParserHelpers.t4" #>
<#

List<TypeToParse> typesToParse = new List<TypeToParse>();

typesToParse.Add(new TypeToParse {
	PrimitiveName = "byte",
	ClassName = "Byte",
	ValueCalculationTypeName = "uint"
});

typesToParse.Add(new TypeToParse {
	PrimitiveName = "short",
	ClassName = "UInt16",
	ValueCalculationTypeName = "uint"
});

typesToParse.Add(new TypeToParse {
	PrimitiveName = "uint",
	ClassName = "UInt32",
	ValueCalculationTypeName = "uint"
});

typesToParse.Add(new TypeToParse {
	PrimitiveName = "ulong",
	ClassName = "UInt64",
	ValueCalculationTypeName = "ulong"
});

List<TryParseOverload> tryParseOverloads = new List<TryParseOverload>();

tryParseOverloads.Add(new TryParseOverload {
	BufferParamsText = "byte* text, int length",
	BytesConsumedParamText = "",
	LengthName = "length"
});

tryParseOverloads.Add(new TryParseOverload {
	BufferParamsText = "byte* text, int length",
	BytesConsumedParamText = ", out int bytesConsumed",
	LengthName = "length"
});

tryParseOverloads.Add(new TryParseOverload {
	BufferParamsText = "ReadOnlySpan<byte> text",
	BytesConsumedParamText = "",
	LengthName = "text.Length"
});

tryParseOverloads.Add(new TryParseOverload {
	BufferParamsText = "ReadOnlySpan<byte> text",
	BytesConsumedParamText = ", out int bytesConsumed",
	LengthName = "text.Length"
});

#>
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// NOTE: This file is generated via a T4 template. Please do not edit this file directly. Any changes should be made
// in InvariantUtf8_unsigned.tt.

namespace System.Text
{
    public static partial class PrimitiveParser
    {
        public static partial class InvariantUtf8
        {
			public static partial class Hex
			{
<#
foreach (TypeToParse typeToParse in typesToParse)
{
#>
				#region <#=typeToParse.ClassName#>
<#
	foreach (TryParseOverload tryParseOverload in tryParseOverloads)
	{
#>
				public unsafe static bool TryParse<#=typeToParse.ClassName#>(<#=tryParseOverload.BufferParamsText#>, out <#=typeToParse.PrimitiveName#> value<#=tryParseOverload.BytesConsumedParamText#>)
				{
					if (<#=tryParseOverload.LengthName#> < 1)
					{
<#
		PrintSetOutParamsAndReturnFalseText(typeToParse, tryParseOverload, 6);
#>
					}

					// Cache s_hexLookup in order to avoid static constructor checks
                    byte[] hexLookup = s_HexLookup;

					// Parse the first digit separately. If invalid here, we need to return false.
					byte firstByte = text[0];
                    byte firstDigit = hexLookup[firstByte];
                    if (firstDigit == 0xFF)
					{
<#
		PrintSetOutParamsAndReturnFalseText(typeToParse, tryParseOverload, 6);
#>
					}
					<#=typeToParse.ValueCalculationTypeName#> parsedValue = firstDigit;

					if (<#=tryParseOverload.LengthName#> < <#=typeToParse.ClassName#>OverflowLengthHex)
					{
						// Length is less than <#=typeToParse.ClassName#>OverflowLengthHex; overflow is not possible
						for (int index = 1; index < <#=tryParseOverload.LengthName#>; index++)
						{
							byte nextByte = text[index];
                            byte nextDigit = hexLookup[nextByte];
                            if (nextDigit == 0xFF)
							{
<#
		PrintSetOutParamsAndReturnTrueText(typeToParse, tryParseOverload, false, 8);
#>
							}
							parsedValue = parsedValue * 0x10 + nextDigit;
						}
					}
					else
					{
						// Length is greater than <#=typeToParse.ClassName#>OverflowLengthHex; overflow is only possible after <#=typeToParse.ClassName#>OverflowLengthHex
						// digits. There may be no overflow after <#=typeToParse.ClassName#>OverflowLengthHex if there are leading zeroes.
						for (int index = 1; index < <#=typeToParse.ClassName#>OverflowLengthHex - 1; index++)
						{
							byte nextByte = text[index];
                            byte nextDigit = hexLookup[nextByte];
                            if (nextDigit == 0xFF)
							{
<#
		PrintSetOutParamsAndReturnTrueText(typeToParse, tryParseOverload, false, 8);
#>
							}
							parsedValue = parsedValue * 0x10 + nextDigit;
						}
						for (int index = <#=typeToParse.ClassName#>OverflowLengthHex - 1; index < <#=tryParseOverload.LengthName#>; index++)
						{
							byte nextByte = text[index];
                            byte nextDigit = hexLookup[nextByte];
                            if (nextDigit == 0xFF)
							{
<#
		PrintSetOutParamsAndReturnTrueText(typeToParse, tryParseOverload, false, 8);
#>
							}
							// If we try to append a digit to anything larger than <#=typeToParse.PrimitiveName#>.MaxValue / 0x10, there will be overflow
							if (parsedValue > <#=typeToParse.PrimitiveName#>.MaxValue / 0x10)
							{
<#
		PrintSetOutParamsAndReturnFalseText(typeToParse, tryParseOverload, 8);
#>
							}
							parsedValue = parsedValue * 0x10 + nextDigit;
						}
					}

<#
		PrintSetOutParamsAndReturnTrueText(typeToParse, tryParseOverload, true, 5);
#>
				}

<#
	}
#>
				#endregion

<#
}
#>
			}
        }
    }
}